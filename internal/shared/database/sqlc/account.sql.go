// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (name, email, password, avatar)
VALUES ($1, $2, $3, $4)
RETURNING id, name, email, password, avatar, created_at, updated_at, deleted_at
`

type CreateAccountParams struct {
	Name     string
	Email    string
	Password string
	Avatar   pgtype.Text
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Avatar,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findAccount = `-- name: FindAccount :one
SELECT id, name, email, avatar, created_at, updated_at, deleted_at, password
FROM accounts
WHERE id = $1
`

type FindAccountRow struct {
	ID        uuid.UUID
	Name      string
	Email     string
	Avatar    pgtype.Text
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	Password  string
}

func (q *Queries) FindAccount(ctx context.Context, id uuid.UUID) (FindAccountRow, error) {
	row := q.db.QueryRow(ctx, findAccount, id)
	var i FindAccountRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Password,
	)
	return i, err
}

const findAccountByEmail = `-- name: FindAccountByEmail :one
SELECT id, name, email, avatar, created_at, updated_at, deleted_at, password
FROM accounts
WHERE email = $1
`

type FindAccountByEmailRow struct {
	ID        uuid.UUID
	Name      string
	Email     string
	Avatar    pgtype.Text
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	Password  string
}

func (q *Queries) FindAccountByEmail(ctx context.Context, email string) (FindAccountByEmailRow, error) {
	row := q.db.QueryRow(ctx, findAccountByEmail, email)
	var i FindAccountByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Password,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET name = $2, avatar = $3
WHERE id = $1
RETURNING id, name, email, password, avatar, created_at, updated_at, deleted_at
`

type UpdateAccountParams struct {
	ID     uuid.UUID
	Name   string
	Avatar pgtype.Text
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.ID, arg.Name, arg.Avatar)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
