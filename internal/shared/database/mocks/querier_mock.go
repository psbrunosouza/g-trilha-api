// Code generated by MockGen. DO NOT EDIT.
// Source: querier.go
//
// Generated by this command:
//
//	mockgen -source=querier.go -destination=../mocks/querier_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	db "trilha-api/internal/shared/database/sqlc"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockQuerier) CreateAccount(ctx context.Context, arg db.CreateAccountParams) (db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, arg)
	ret0, _ := ret[0].(db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockQuerierMockRecorder) CreateAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockQuerier)(nil).CreateAccount), ctx, arg)
}

// FindAccount mocks base method.
func (m *MockQuerier) FindAccount(ctx context.Context, arg uuid.UUID) (db.FindAccountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccount", ctx, arg)
	ret0, _ := ret[0].(db.FindAccountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccount indicates an expected call of FindAccount.
func (mr *MockQuerierMockRecorder) FindAccount(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccount", reflect.TypeOf((*MockQuerier)(nil).FindAccount), ctx, arg)
}

// FindAccountByEmail mocks base method.
func (m *MockQuerier) FindAccountByEmail(ctx context.Context, arg string) (db.FindAccountByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccountByEmail", ctx, arg)
	ret0, _ := ret[0].(db.FindAccountByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccountByEmail indicates an expected call of FindAccountByEmail.
func (mr *MockQuerierMockRecorder) FindAccountByEmail(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccountByEmail", reflect.TypeOf((*MockQuerier)(nil).FindAccountByEmail), ctx, arg)
}
