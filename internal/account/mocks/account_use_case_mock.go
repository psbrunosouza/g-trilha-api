// Code generated by MockGen. DO NOT EDIT.
// Source: account_use_case.go
//
// Generated by this command:
//
//	mockgen -source=account_use_case.go -destination=../mocks/account_use_case_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	entity "trilha-api/internal/account/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockAccountUseCaseInterface is a mock of AccountUseCaseInterface interface.
type MockAccountUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockAccountUseCaseInterfaceMockRecorder is the mock recorder for MockAccountUseCaseInterface.
type MockAccountUseCaseInterfaceMockRecorder struct {
	mock *MockAccountUseCaseInterface
}

// NewMockAccountUseCaseInterface creates a new mock instance.
func NewMockAccountUseCaseInterface(ctrl *gomock.Controller) *MockAccountUseCaseInterface {
	mock := &MockAccountUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockAccountUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountUseCaseInterface) EXPECT() *MockAccountUseCaseInterfaceMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockAccountUseCaseInterface) Find(account *entity.AccountEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockAccountUseCaseInterfaceMockRecorder) Find(account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAccountUseCaseInterface)(nil).Find), account)
}

// Register mocks base method.
func (m *MockAccountUseCaseInterface) Register(account *entity.AccountEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockAccountUseCaseInterfaceMockRecorder) Register(account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAccountUseCaseInterface)(nil).Register), account)
}
